# Independent variables
X = data.drop(columns=['datetime','disease'])
# Dependent variable
y = data[['disease']]
#Smote sampling
os = SMOTE(random_state=0)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=100)

columns = X_train.columns
smote_data_X,smote_data_y = os.fit_resample(X_train, y_train)
smote_data_X = pd.DataFrame(data=smote_data_X, columns=columns)
smote_data_y = pd.DataFrame(data=smote_data_y, columns=['disease'])

def build_model():
    classifier = Sequential()
    classifier.add(Dense(units = 18, kernel_initializer = 'uniform', activation = 'relu', input_dim = X_train.shape[1]))
    classifier.add(Dropout(0.2))
    classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))
    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))
    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

classifier = build_model()
History=classifier.fit(smote_data_X, smote_data_y, batch_size = 15, epochs = 100)

# Plot accuracy
    acc = History.history['accuracy']
    val_acc = History.history['val_accuracy']
    plt.plot(epochs, acc, 'b', label='Training accuracy')
    plt.plot(epochs, val_acc, 'r', label='Validation accuracy')
    plt.title('Training and Validation Accuracy')
    plt.legend()
    plt.show()

# Plot loss
    loss = History.history['loss']
    val_loss = History.history['val_loss']
    plt.plot(epochs, loss, 'b', label='Training loss')
    plt.plot(epochs, val_loss, 'r', label='Validation loss')
    plt.title('Training and Validation Loss')
    plt.legend()
    plt.show()

# Predicting the test set results
y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

cmap1 = sns.diverging_palette(260, -10, s=50, l=75, n=5, as_cmap=True)
plt.subplots(figsize=(12, 8))
cf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(cf_matrix / np.sum(cf_matrix), cmap='Greens', annot=True, annot_kws={'size': 15})
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

#SVM
from sklearn.preprocessing import StandardScaler
cols = X_train.columns
scaler = StandardScaler()

X_train = scaler.fit_transform(smote_data_X)

X_test = scaler.transform(X_test)

X_train = pd.DataFrame(X_train, columns=[cols])
X_test = pd.DataFrame(X_test, columns=[cols])

# instantiate classifier with rbf kernel and C=100
svc=SVC(C=10, gamma=1)


# fit classifier to training set
svc.fit(X_train,y_train)


# make predictions on test set
y_pred=svc.predict(X_test)


# compute and print accuracy score
print('Model accuracy score with rbf kernel and C=10 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

cmap1 = sns.diverging_palette(260, -10, s=50, l=75, n=5, as_cmap=True)
plt.subplots(figsize=(12, 8))
cf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(cf_matrix / np.sum(cf_matrix), cmap='Greens', annot=True, annot_kws={'size': 15})
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

